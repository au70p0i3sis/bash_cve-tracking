#!/usr/bin/env bash
# queries the NVD for cves, searches by cpe

### TODO ###
# make output_json output real json (create objects instead of
# seperate lines)
# option to search through a historical range i.e. not from
# "today to today-maxage", but from "2019-10-17 to 2019-12-29"

query_form() {
	# usage: query_form <cpeString> <startDate> <endDate>
	local cpeq="cpeMatchString=$1"
	# date format: yyyy-MM-ddTHH:mm:ss:SSS Z 
	# full date example: modStartDate=2021-08-04T13:00:00:000 UTC%2B01:00&modEndDate=2021-10-22T13:36:00:000 UTC%2B01:00
	declare datestart dateend dateq query
	datestart="${2}T13:00:00:000%20UTC%2B01:00"
	dateend="${3}T13:00:00:000%20UTC%2B01:00"
	dateq="pubStartDate=${datestart}&pubEndDate=${dateend}"
	query="${baseurl}?${cpeq}&${dateq}"
	echo "$query"
} 

query_run() {
	declare json_result
	json_result=$(curl -s "$1")
	echo "$json_result"
}

json_extract2b64(){ 
	# extracts desired json data, outputs in space seperated string
	# of base64 encoded json items
	declare qresult num_results cves_full json_out
	qresult="$1"
	#items="$(echo "$result" | jq --raw-output '.result.CVE_ITEMS[]')"
	num_results="$(echo "$qresult" | jq --raw-output '.totalResults')"
	if [[ "$num_results" -eq 0 ]]; then 
		echo "none"
	else 
		cves_full=$(echo "$qresult" | jq -c '.result | .CVE_Items[]')
		json_out=$(echo "$cves_full" |  jq -c '{
			cve_id: .cve.CVE_data_meta.ID,
			pub_date: .publishedDate ,
			description: .cve.description.description_data[].value,
			severity: .impact.baseMetricV3.cvssV3.baseSeverity,
			reference: [.cve.references.reference_data[].url]
			} | .')
		declare -a json_results_b64
		while read -r jline; do 
			entry_b64="$(echo "$jline" | base64 | tr -d '[:space:]')"
			json_results_b64+=("$entry_b64")
		done <<< "$json_out"
		echo "${json_results_b64[@]}"
	fi
}

output_human(){
	declare _cve _pubdate _descr _severity _references
	for entry in $@; do 
		entry="$(echo $entry | base64 -d)"
		_cve="$(echo "$entry" | jq '.cve_id')"
		_pubdate="$(echo "$entry" | jq '.pub_date')"
		_descr="$(echo "$entry" | jq '.description')"
		_severity="$(echo "$entry" | jq '.severity')"
		_references="$(echo "$entry" | jq '.reference[]')"
		echo
		echo "CVE: $_cve"
		echo "Date Published: $_pubdate"
		echo "Severity: $_severity"
		echo "Description: $_descr"
		echo "References: $_references"
		echo
	done
}

output_json(){
	echo "${@// /}" | base64 -d
}

print_help(){
	echo "retrieve a list of cve's for a given cpe (Common Platform Enumerations, v2.3)"	
	echo
	echo "How to use:"	
	echo "cve_query.sh [OPTION]... CPE" 
	echo
	echo "Options:"
	echo "-a INT		set age range in days (120 is the default and max accepted by api)"
	echo "-h 		print help"
	echo "-j 		output in json (default:human readable)"
	echo "-r		run query and return raw result, no parsing or filtering"
	echo
	echo "example: cve_query.sh -a 30 \"cpe:2.3:o:govicture:wr1200_firmware:*:*:*:*:*:*:*:*\""
}

main(){
	begin_date="$(date --date="$maxage days ago" +%Y-%m-%d)"
	end_date="$(date +%Y-%m-%d)"
	q="$(query_form "$cpe" "$begin_date" "$end_date")"
	if [[ "$output_mode" == "raw" ]];  then 
		query_run "$q"
	else 
		b64_entries="$(json_extract2b64 "$(query_run "$q")")"
		if [[ "$b64_entries" == "none" ]]; then 
			echo "returned 0 cves"
			exit 0
		else 
			if [[ "$output_mode" == "json" ]] ; then 
				output_json "$b64_entries"
				exit 0 
			else 
				output_human "$b64_entries"
				exit 0 
			fi
		fi
	fi
}

# defaults
baseurl="https://services.nvd.nist.gov/rest/json/cves/1.0"
maxage=120  # how far back to search, api accepts 120 day ranges
cpe="${BASH_ARGV[0]}"
output_mode="human"

while getopts ":a:hjr?" opt; do 
	case "$opt" in 
		a) 	# validate the max age input
			if [[ "${OPTARG//[^0-9]/}" == "$OPTARG" ]]; then 
				if [[ $OPTARG -gt 120 ]] || [[ "$OPTARG" -lt 1 ]]; then
					echo "max age must be an int between 1-120"
					exit 1
				else
					maxage=$OPTARG
				fi
			else
				echo "max age must be an int between 1-120"
				exit 1
			fi
			;;
		h) print_help && exit ;;
		j) output_mode="json" ;;
		r) output_mode="raw" ;;
		\?) echo "invalid option -$OPTARG" && print_help && exit 1 ;;
	esac
done

if [[ ! "${#@}" -gt 0 ]]; then 
	print_help 
	exit 1
else
	input_cpe="${BASH_ARGV[0]}"
	# lazy validate cpe argument
	if [[ "$input_cpe" =~ cpe:2.3: ]]; then 
		main "$input_cpe"
	else
		echo "invalid cpe, should be in the format \"cpe:2.3:*:*:*:*:*:*:*:*:*:*:*\""
	fi
fi



