#!/usr/bin/env bash

#todo:
# clean exits
# and an option for outputing to stdout or output file

outfile=ubuntuserver_installed.txt
baseurl="https://services.nvd.nist.gov/rest/json/cpes/1.0"


 
query_cpes(){ # queries api and human prints results
	program="$1"
	version="$2"
	query="?keyword=$program%20$version"
	json_result=$(curl -s "$baseurl$query")
	total_returned="$(echo "$json_result" | jq -c '.totalResults')"
	if [[ ! "$total_returned" -gt 0 ]]; then  
		echo "returned 0 results"
		exit 1 
	fi
	extracted_json=$(
		echo "$json_result" | jq --compact-output '.result.cpes[] | 
		{
		cpe:.cpe23Uri, 
		title:.titles[].title, 
		deprecated: .deprecated, 
		lastmodified: .lastModifiedDate
		}')
	# convert each json item into base64 and insert into bash array
	declare -ga json_results_b64
	while read -r jline; do 
		entry_b64="$(echo "$jline" | base64 | tr -d '[:space:]')"
		json_results_b64+=("$entry_b64")
	done <<< "$extracted_json"
	#echo "$json_results_b64"
}

json2human_interact() {
	# interactive entry selection and output to file
	printf "\n%s\n\n" "found ${#json_results_b64[*]} results:"
	# get each item in json and output in easily readable format
	local i=0
	for entry in ${json_results_b64[*]}; do 
		((++i))
		entry="$(echo "$entry" | base64 -d)"
		declare _cpe _title _depre _lastmod
		_cpe=$(echo "$entry" | jq '.cpe')
		_title=$(echo "$entry" | jq '.title')
		_depre=$(echo "$entry" | jq '.deprecated')
		_lastmod=$(echo "$entry" | jq '.lastmodified')
		echo "ENTRY $i"
		echo "$_title"
		echo "cpe: $_cpe"
		echo "last modified: $_lastmod"
		if [[ "$_depre" == "true" ]]; then  
			echo "WARNING: deprecated"
		fi
		echo
	done
}

json2human_minimal(){
	# output only the cpes
	local i=0
	for entry in ${json_results_b64[*]}; do 
		((++i))
		echo "$entry" | base64 -d | jq --raw-output '.cpe'
	done
}
 
get_input() {
	input_success="false"
	while [[ $input_success == "false" ]]; do 
		read -r -p "enter entry number(s) to output (eg: 1 3 9) or 'exit' to leave: " input_raw
		if [[ "${input_raw,}" == "exit" ]]; then 
			echo "exiting"
			exit 0
		elif [[ ! "$input_raw" == "${input_raw//[^0-9| +]/}" ]]; then 
			echo "numbers only"
		else
			mapfile input_nums < <(echo "$input_raw")
			for n in ${input_nums[*]}; do 
				output_cpe "$n"
			done
			exit
		fi
	done
}

output_cpe(){  # appends selected cpe's to output file
	local x="$1"
	x=$((x-1))
	if [[ "$x" -gt "$total_returned" ]]; then 
		echo "FALIED to find entry $1, number higher than available
		entries"
	else
		declare r
		r="$(echo "${json_results_b64[$x]}" | base64 -d | jq '.cpe' | tr -d '\"')"
		if [[ "${#r}" -gt 1 ]] && [[ "$r" =~ cpe:2.3 ]]; then 
			echo
			echo "$r" >> "$outfile"
			echo "appended $r to $outfile"
		else
			echo
			echo "couldn't retrieve entry #$1, is it listed above?"
		fi
	fi
}

print_help () {
	echo "How to use:"
	echo "cpe_find.sh [OPTION]... PROGRAM [VERSION]" 
	echo
	echo "optional arguments:"
	echo "-h 		print help"
	echo "-i 		interactive mode: show info on query results, select results to append cpes to the outfile"
	echo "-m 		minimal, non-interactive mode: returns all cpe's matching query (up to 20 results)"
	echo "-o file 	override default output file"
	echo
	echo "the nvd api will return a max 20 results, specify a version number in your search for more precise results"
	exit
}

main(){
	query_cpes "$1" "$2"
	if [[ "$output_mode" == "minimal" ]] && [[ -n "$outfile_opt" ]]; then
		#echo "outputing to $outfile_opt"
		json2human_minimal | tee -a "$outfile_opt"
	elif [[ "$output_mode" == "minimal" ]]; then 
		json2human_minimal
	else
		json2human_interact
		get_input
		output_cpe
	fi
}

output_mode="minimal"
while getopts ":himo:" opt; do 
	case "$opt" in 
		h) print_help ;;
		i) output_mode="interactive" ;;
		m) 
			echo "executing in minimal mode"
			output_mode="minimal"	
			;;
		o)  
			echo "outputting to file $OPTARG" 
			outfile_opt="$OPTARG"
			;;
		\?) echo "invalid option -$OPTARG" && exit 1 && print_help ;;
	esac
done

if [[ ! "${#@}" -gt 0 ]]; then 
	print_help 
else
	main "${BASH_ARGV[1]}" "${BASH_ARGV[0]}"
fi

